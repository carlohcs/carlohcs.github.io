webpackHotUpdate_N_E("pages/skills",{

/***/ "./components/GlobalStyle.js":
/*!***********************************!*\
  !*** ./components/GlobalStyle.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement;\nfunction _callSuper(t, o, e) { return o = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(o), Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n\nvar GlobalStyle = /*#__PURE__*/function (_Component) {\n  function GlobalStyle() {\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, GlobalStyle);\n    return _callSuper(this, GlobalStyle, arguments);\n  }\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(GlobalStyle, _Component);\n  return Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(GlobalStyle, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {\n        id: \"449185487\"\n      }, \"html,body,#__next,.app{min-height:100vh;}html{content:\\\"\\\";overflow-x:hidden;}html.overflow--hidden{overflow:hidden;}html.overflow--hidden body,html.overflow--hidden .app{overflow:hidden;}html,body{-webkit-scrollbar-gutter:stable;-moz-scrollbar-gutter:stable;-ms-scrollbar-gutter:stable;scrollbar-gutter:stable;}@media (prefers-color-scheme:light){html{content:\\\"light\\\";}}@media (prefers-color-scheme:dark){html{content:\\\"dark\\\";}}body{background:#fff;color:#1e1e1e;-webkit-scroll-behavior:auto;-moz-scroll-behavior:auto;-ms-scroll-behavior:auto;scroll-behavior:auto;-webkit-scrollbar-gutter:stable;-moz-scrollbar-gutter:stable;-ms-scrollbar-gutter:stable;scrollbar-gutter:stable;overflow:hidden auto;font-family:'Rubik',sans-serif;font-weight:300;line-height:1.5;font-size:1.125em;}body.dark-ui{background:#1e1e1e;color:#e1e1e1;}body.dark-ui a{color:#e1e1e1;}body.dark-ui:not(.menu-open) .trigger-menu-button{border-top-color:#e1e1e1;}body.dark-ui .trigger-menu-button:before,body.dark-ui .trigger-menu-button:after{background:#e1e1e1;}body.dark-ui .toggle-language__option:nth-of-type(1):after{background:#e1e1e1;}body.loaded{-webkit-scroll-behavior:smooth;-moz-scroll-behavior:smooth;-ms-scroll-behavior:smooth;scroll-behavior:smooth;}body.menu-open .page-component:after,body.menu-open .page__introduction:after{z-index:3;content:\\\"\\\";position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;display:block;}body.menu-open .trigger-menu-button{border-color:transparent;}body.menu-open .trigger-menu-button:before,body.menu-open .trigger-menu-button:after{width:33px;left:-2px;}body.menu-open .trigger-menu-button:before{-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg);}body.menu-open .trigger-menu-button:after{-webkit-transform:rotate(135deg);-ms-transform:rotate(135deg);transform:rotate(135deg);top:9px;}body.menu-open .nav li{width:200px;margin-left:0;}body.menu-open .page-component,body.menu-open .page__introduction{-webkit-transform:translateX(260px);-ms-transform:translateX(260px);transform:translateX(260px);background-color:rgba(29,199,121,.12);-webkit-filter:blur(5px);filter:blur(5px);}a:not(.no-link-style){color:#1e1e1e;-webkit-text-decoration:none;text-decoration:none;position:relative;display:inline-block;vertical-align:middle;border-bottom:2px solid rgba(29,199,121,0.65);-webkit-transition:color 500ms cubic-bezier(0.47,0.99,1,0.99),-webkit-transform 0.3s ease-in-out;-webkit-transition:color 500ms cubic-bezier(0.47,0.99,1,0.99),transform 0.3s ease-in-out;transition:color 500ms cubic-bezier(0.47,0.99,1,0.99),transform 0.3s ease-in-out;outline:none;}a:not(.no-link-style):hover,a:not(.no-link-style):active,a:not(.no-link-style):focus{color:#fff;}a:not(.no-link-style):before{content:\\\" \\\";position:absolute;left:0;bottom:0;width:0;height:100%;z-index:-1;background-color:#1DC779;-webkit-transform:perspective(1px) translateZ(0);-ms-transform:perspective(1px) translateZ(0);transform:perspective(1px) translateZ(0);-webkit-transition:width 500ms cubic-bezier(0.47,0.99,1,0.99);transition:width 500ms cubic-bezier(0.47,0.99,1,0.99);}a:not(.no-link-style):hover:before,a:not(.no-link-style):active:before,a:not(.no-link-style):focus:before{width:100%;}a{outline:none;}a.link--zoom{-webkit-transition:-webkit-transform 500ms cubic-bezier(0.47,0.99,1,0.99);-webkit-transition:transform 500ms cubic-bezier(0.47,0.99,1,0.99);transition:transform 500ms cubic-bezier(0.47,0.99,1,0.99);}a.link--zoom:hover,a.link--zoom:active,a.link--zoom:focus{-webkit-transform:scale(1.3);-ms-transform:scale(1.3);transform:scale(1.3);}.container--center{margin:0 auto;}@media (min-width:992px){.container{max-width:960px;}}@media (min-width:1200px){.container{max-width:1140px;}}@media (min-width:1440px){.container{max-width:1348px;}}@media (min-width:1680px){.container{max-width:1556px;}}@media (min-width:1920px){.container{max-width:1764px;}}.page__introduction{padding:0 40px;}@media screen and (min-width:1280px){.page__introduction{padding:0 80p;}}@media screen and (min-width:1440px){.page__introduction{padding:0 120px;}}.page__description{max-width:600px;display:inline-block;}@media (min-width:1200px){.page__description{max-width:800px;}}@media (min-width:1024px) and (min-height:768px){.content{text-align:left;}}.column{width:50%;}.column:nth-of-type(1){padding-right:20px;}@media screen and (min-width:1280px){.column:nth-of-type(1){padding-right:60px;}}.column:nth-of-type(2){padding-left:20px;}@media screen and (min-width:1280px){.column:nth-of-type(2){padding-left:60px;}}h2{font-size:1.2em;}@media screen and (min-width:768px){h1{font-size:4.5em;font-weight:500;margin:0;}h2{font-size:2.2em;margin-top:0;}a{padding:2px 2px 0;}}.page-component{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;width:100%;min-height:calc(100vh - 120px);-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;visibility:visible;box-sizing:border-box;padding:0 40px 40px;}@media screen and (min-width:1280px){.page-component{padding:0 80px 80px 80px;}}@media screen and (min-width:1440px){.page-component{padding:0 120px 120px 120px;}}.page-component>h1{margin-top:0;}.page-component,.page__introduction{position:relative;-webkit-animation:fadeInUp 0.5s ease-out;animation:fadeInUp 0.5s ease-out;opacity:1;z-index:20;-webkit-transform:translateY(0);-ms-transform:translateY(0);transform:translateY(0);-webkit-transition:opacity 0.6s ease-in-out,-webkit-transform 0.6s ease-in,filter 0.6s ease-out;-webkit-transition:opacity 0.6s ease-in-out,transform 0.6s ease-in,filter 0.6s ease-out;transition:opacity 0.6s ease-in-out,transform 0.6s ease-in,filter 0.6s ease-out;will-change:opacity,transform,filter;}@-webkit-keyframes fadeInUp{from{opacity:0;-webkit-transform:translateY(100px);-ms-transform:translateY(100px);transform:translateY(100px);}to{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);transform:translateY(0);}}@keyframes fadeInUp{from{opacity:0;-webkit-transform:translateY(100px);-ms-transform:translateY(100px);transform:translateY(100px);}to{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);transform:translateY(0);}}#__next-prerender-indicator{display:none;}.icon{width:24px;height:24px;}.flex{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;}.flex--justify-center{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}.flex--justify-start{-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;}.loading-indicator{position:fixed;top:0;left:0;width:100%;height:3px;background:linear-gradient(90deg,#000,#28a745);z-index:9999;-webkit-animation:loading-slide 10s ease-in-out infinite;animation:loading-slide 10s ease-in-out infinite;}@-webkit-keyframes loading-slide{0%{-webkit-transform:translateX(-100%);-ms-transform:translateX(-100%);transform:translateX(-100%);}50%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);transform:translateX(0%);}100%{-webkit-transform:translateX(100%);-ms-transform:translateX(100%);transform:translateX(100%);}}@keyframes loading-slide{0%{-webkit-transform:translateX(-100%);-ms-transform:translateX(-100%);transform:translateX(-100%);}50%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);transform:translateX(0%);}100%{-webkit-transform:translateX(100%);-ms-transform:translateX(100%);transform:translateX(100%);}}@media (min-width:1280px){.project:not(.project--main) .project__title{margin-top:-40px !important;}}@media (min-width:1440px){.project:not(.project--main) .project__title{margin-top:-60px !important;}}@media (min-width:1280px){.project:not(.project--main):nth-child(odd) .project__cover{box-shadow:-25px 30px 60px 5px rgba(0,0,0,.3);}}@media (min-width:1280px){.project:not(.project--main):nth-child(even) .project__cover{box-shadow:25px 30px 60px 5px rgba(0,0,0,.3);}}.dark-ui .project__cover{box-shadow:5px 10px 30px 0px rgba(255,255,255,0.2) !important;}.project{margin:80px 0;}@media screen and (min-width:1024px){.project{margin:100px 0;}}.project--no-shadow .project__cover{box-shadow:none !important;}@media screen and (min-width:1024px){.project--reduced-margin{margin:100px 0;}}.project__cover{max-width:100%;margin:0 auto 20px;box-shadow:0 15px 20px 5px rgba(68,68,68,.3);}.project__description{max-width:650px;margin-top:10px;}@media screen and (min-width:1024px){.project__description{margin-top:20px;}}.project__description p{margin:0;}@media screen and (min-width:1024px){.project--main .project__cover{max-width:1200px;margin:0 auto 60px;display:block;}}.project--main .project__content{-webkit-flex-flow:column !important;-ms-flex-flow:column !important;flex-flow:column !important;}.project--main .project__content__column:nth-of-type(1){width:100% !important;}.project--main .project__content__column:nth-of-type(2){width:auto !important;}.project .project__content{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}@media screen and (min-width:1024px){.project .project__content__column{width:50%;}}@media screen and (min-width:1024px){.project .project__content{-webkit-flex-flow:row;-ms-flex-flow:row;flex-flow:row;}.project:not(.project--main):nth-child(even) .project__content{-webkit-flex-direction:row-reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;}@media screen and (min-width:1024px){.project:not(.project--main):nth-child(even) .project__content__column:nth-of-type(1){padding-left:20px;}.project:not(.project--main):nth-child(even) .project__content__column:nth-of-type(2){padding-right:20px;}}@media screen and (min-width:1280px){.project:not(.project--main):nth-child(even) .project__content__column:nth-of-type(1){padding-left:40px;}.project:not(.project--main):nth-child(even) .project__content__column:nth-of-type(2){padding-right:40px;}}@media screen and (min-width:1024px){.project:not(.project--main):nth-child(odd) .project__content__column:nth-of-type(1){padding-right:20px;}.project:not(.project--main):nth-child(odd) .project__content__column:nth-of-type(2){padding-left:20px;}}@media screen and (min-width:1280px){.project:not(.project--main):nth-child(odd) .project__content__column:nth-of-type(1){padding-right:40px;}.project:not(.project--main):nth-child(odd) .project__content__column:nth-of-type(2){padding-left:40px;}}}.project .project__video{width:100%;max-width:100%;cursor:pointer;}.project:last-child{margin-bottom:0;}.project__title{margin:0;}.project__technology{font-size:12px;margin-bottom:0;}@media screen and (min-width:1024px){.project__technology{font-size:16px;margin-top:20px !important;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/carlohcs/Documents/repository/carlohcs.github.io/components/GlobalStyle.js */\");\n    }\n  }]);\n}(react__WEBPACK_IMPORTED_MODULE_6__[\"Component\"]);\n/* harmony default export */ __webpack_exports__[\"default\"] = (GlobalStyle);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/GlobalStyle.js\n");

/***/ })

})